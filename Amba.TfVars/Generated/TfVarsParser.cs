//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TfVars.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Amba.TfVars {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TfVarsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		LCURL=10, RCURL=11, LPAREN=12, RPAREN=13, EOF_=14, NATURAL_NUMBER=15, 
		DESCRIPTION=16, MULTILINESTRING=17, IDENTIFIER=18, STRING=19, LINECOMMENT=20, 
		BLOCKCOMMENT=21, EOLS=22, WS=23, DOT=24;
	public const int
		RULE_file_ = 0, RULE_variable_definition = 1, RULE_identifier = 2, RULE_expression = 3, 
		RULE_section = 4, RULE_val = 5, RULE_index = 6, RULE_list_ = 7, RULE_map_ = 8, 
		RULE_map_pair = 9, RULE_map_key = 10, RULE_string = 11, RULE_signed_number = 12, 
		RULE_null = 13, RULE_number = 14, RULE_boolean = 15, RULE_comment = 16;
	public static readonly string[] ruleNames = {
		"file_", "variable_definition", "identifier", "expression", "section", 
		"val", "index", "list_", "map_", "map_pair", "map_key", "string", "signed_number", 
		"null", "number", "boolean", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'['", "']'", "','", "'+'", "'-'", "'null'", "'true'", "'false'", 
		"'{'", "'}'", "'('", "')'", null, null, null, null, null, null, null, 
		null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "LCURL", "RCURL", 
		"LPAREN", "RPAREN", "EOF_", "NATURAL_NUMBER", "DESCRIPTION", "MULTILINESTRING", 
		"IDENTIFIER", "STRING", "LINECOMMENT", "BLOCKCOMMENT", "EOLS", "WS", "DOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TfVars.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TfVarsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TfVarsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TfVarsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class File_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TfVarsParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_definitionContext[] variable_definition() {
			return GetRuleContexts<Variable_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_definitionContext variable_definition(int i) {
			return GetRuleContext<Variable_definitionContext>(i);
		}
		public File_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterFile_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitFile_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_Context file_() {
		File_Context _localctx = new File_Context(Context, State);
		EnterRule(_localctx, 0, RULE_file_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34;
				variable_definition();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER );
			State = 39;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterVariable_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitVariable_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_definitionContext variable_definition() {
		Variable_definitionContext _localctx = new Variable_definitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_variable_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			identifier();
			State = 42;
			Match(T__0);
			State = 43;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TfVarsParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section() {
			return GetRuleContext<SectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TfVarsParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TfVarsParser.RPAREN, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case LCURL:
			case EOF_:
			case NATURAL_NUMBER:
			case DESCRIPTION:
			case MULTILINESTRING:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				section();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(LPAREN);
				State = 49;
				expression();
				State = 50;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public List_Context list_() {
			return GetRuleContext<List_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_Context map_() {
			return GetRuleContext<Map_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_section);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				list_();
				}
				break;
			case LCURL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				map_();
				}
				break;
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case EOF_:
			case NATURAL_NUMBER:
			case DESCRIPTION:
			case MULTILINESTRING:
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullContext @null() {
			return GetRuleContext<NullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION() { return GetToken(TfVarsParser.DESCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOF_() { return GetToken(TfVarsParser.EOF_, 0); }
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 10, RULE_val);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				@null();
				}
				break;
			case T__4:
			case T__5:
			case NATURAL_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				signed_number();
				}
				break;
			case MULTILINESTRING:
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 61;
				@string();
				}
				break;
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 62;
				boolean();
				}
				break;
			case DESCRIPTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				Match(DESCRIPTION);
				}
				break;
			case EOF_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 64;
				Match(EOF_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 12, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__1);
			State = 68;
			expression();
			State = 69;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public List_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterList_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitList_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_Context list_() {
		List_Context _localctx = new List_Context(Context, State);
		EnterRule(_localctx, 14, RULE_list_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__1);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 776164L) != 0)) {
				{
				State = 72;
				expression();
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 73;
						Match(T__3);
						State = 74;
						expression();
						}
						} 
					}
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 80;
					Match(T__3);
					}
				}

				}
			}

			State = 85;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(TfVarsParser.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(TfVarsParser.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Map_pairContext[] map_pair() {
			return GetRuleContexts<Map_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_pairContext map_pair(int i) {
			return GetRuleContext<Map_pairContext>(i);
		}
		public Map_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterMap_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitMap_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_Context map_() {
		Map_Context _localctx = new Map_Context(Context, State);
		EnterRule(_localctx, 16, RULE_map_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(LCURL);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==STRING) {
				{
				{
				State = 88;
				map_pair();
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 89;
					Match(T__3);
					}
				}

				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Map_keyContext map_key() {
			return GetRuleContext<Map_keyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Map_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterMap_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitMap_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_pairContext map_pair() {
		Map_pairContext _localctx = new Map_pairContext(Context, State);
		EnterRule(_localctx, 18, RULE_map_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			map_key();
			State = 100;
			Match(T__0);
			State = 101;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_keyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(TfVarsParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TfVarsParser.STRING, 0); }
		public Map_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterMap_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitMap_key(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_keyContext map_key() {
		Map_keyContext _localctx = new Map_keyContext(Context, State);
		EnterRule(_localctx, 20, RULE_map_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TfVarsParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(TfVarsParser.MULTILINESTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 22, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = TokenStream.LA(1);
			if ( !(_la==MULTILINESTRING || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 24, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==T__5) {
				{
				State = 107;
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__5) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 110;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(Context, State);
		EnterRule(_localctx, 26, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NATURAL_NUMBER() { return GetTokens(TfVarsParser.NATURAL_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_NUMBER(int i) {
			return GetToken(TfVarsParser.NATURAL_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(TfVarsParser.DOT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 28, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(NATURAL_NUMBER);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 115;
				Match(DOT);
				State = 116;
				Match(NATURAL_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 30, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINECOMMENT() { return GetToken(TfVarsParser.LINECOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKCOMMENT() { return GetToken(TfVarsParser.BLOCKCOMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITfVarsListener typedListener = listener as ITfVarsListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITfVarsVisitor<TResult> typedVisitor = visitor as ITfVarsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 32, RULE_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !(_la==LINECOMMENT || _la==BLOCKCOMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,24,124,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,4,0,36,8,0,11,0,12,0,37,1,0,1,0,1,1,1,1,1,1,1,
		1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,53,8,3,1,4,1,4,1,4,3,4,58,8,4,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,66,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,76,8,
		7,10,7,12,7,79,9,7,1,7,3,7,82,8,7,3,7,84,8,7,1,7,1,7,1,8,1,8,1,8,3,8,91,
		8,8,5,8,93,8,8,10,8,12,8,96,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,
		1,11,1,12,3,12,109,8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,3,14,118,8,
		14,1,15,1,15,1,16,1,16,1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,0,5,1,0,18,19,2,0,17,17,19,19,1,0,5,6,1,0,8,9,1,0,20,21,122,0,
		35,1,0,0,0,2,41,1,0,0,0,4,45,1,0,0,0,6,52,1,0,0,0,8,57,1,0,0,0,10,65,1,
		0,0,0,12,67,1,0,0,0,14,71,1,0,0,0,16,87,1,0,0,0,18,99,1,0,0,0,20,103,1,
		0,0,0,22,105,1,0,0,0,24,108,1,0,0,0,26,112,1,0,0,0,28,114,1,0,0,0,30,119,
		1,0,0,0,32,121,1,0,0,0,34,36,3,2,1,0,35,34,1,0,0,0,36,37,1,0,0,0,37,35,
		1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,40,5,0,0,1,40,1,1,0,0,0,41,42,3,
		4,2,0,42,43,5,1,0,0,43,44,3,6,3,0,44,3,1,0,0,0,45,46,5,18,0,0,46,5,1,0,
		0,0,47,53,3,8,4,0,48,49,5,12,0,0,49,50,3,6,3,0,50,51,5,13,0,0,51,53,1,
		0,0,0,52,47,1,0,0,0,52,48,1,0,0,0,53,7,1,0,0,0,54,58,3,14,7,0,55,58,3,
		16,8,0,56,58,3,10,5,0,57,54,1,0,0,0,57,55,1,0,0,0,57,56,1,0,0,0,58,9,1,
		0,0,0,59,66,3,26,13,0,60,66,3,24,12,0,61,66,3,22,11,0,62,66,3,30,15,0,
		63,66,5,16,0,0,64,66,5,14,0,0,65,59,1,0,0,0,65,60,1,0,0,0,65,61,1,0,0,
		0,65,62,1,0,0,0,65,63,1,0,0,0,65,64,1,0,0,0,66,11,1,0,0,0,67,68,5,2,0,
		0,68,69,3,6,3,0,69,70,5,3,0,0,70,13,1,0,0,0,71,83,5,2,0,0,72,77,3,6,3,
		0,73,74,5,4,0,0,74,76,3,6,3,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,
		0,77,78,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,80,82,5,4,0,0,81,80,1,0,0,
		0,81,82,1,0,0,0,82,84,1,0,0,0,83,72,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,
		0,85,86,5,3,0,0,86,15,1,0,0,0,87,94,5,10,0,0,88,90,3,18,9,0,89,91,5,4,
		0,0,90,89,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,88,1,0,0,0,93,96,1,0,
		0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,98,5,11,
		0,0,98,17,1,0,0,0,99,100,3,20,10,0,100,101,5,1,0,0,101,102,3,6,3,0,102,
		19,1,0,0,0,103,104,7,0,0,0,104,21,1,0,0,0,105,106,7,1,0,0,106,23,1,0,0,
		0,107,109,7,2,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,
		111,3,28,14,0,111,25,1,0,0,0,112,113,5,7,0,0,113,27,1,0,0,0,114,117,5,
		15,0,0,115,116,5,24,0,0,116,118,5,15,0,0,117,115,1,0,0,0,117,118,1,0,0,
		0,118,29,1,0,0,0,119,120,7,3,0,0,120,31,1,0,0,0,121,122,7,4,0,0,122,33,
		1,0,0,0,11,37,52,57,65,77,81,83,90,94,108,117
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Amba.TfVars
